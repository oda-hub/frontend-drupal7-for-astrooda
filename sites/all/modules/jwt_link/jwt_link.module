<?php

/**
 * @file
 * NUMBERED ITEMS (n) BASED ON
 * https://tools.ietf.org/html/draft-ietf-oauth-jwt-bearer-12#section-1.2.
 */

// Check the Readme for Information About this.
require_once 'JWT/Authentication/JWT.php';
use \Firebase\JWT\JWT;

/**
 * Implements hook_help().
 */
function jwt_link_help($path, $arg) {
  $output = '';
  switch ($path) {
    case 'admin/help#jwt_link':
      $output = '<p>' . t('Provides JWT encoded URL.') . '</p>';
      break;
  }
  return $output;
}

/**
 * Implements hook_permission().
 */
function jwt_link_permission() {
  return array(
    'access jwtlink settings' => array(
      'title' => t('access jwtlink settings'),
      'description' => t('Access JWT Link Settings'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function jwt_link_menu() {
  $items = array();
  $items['admin/config/people/jwtlink'] = array(
    'title' => 'JWT Link',
    'description' => 'Various field for generating JWT Encoded URL.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('jwt_link_admin'),
    'access arguments' => array('access jwtlink settings'),
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

/**
 * Implements hook_token_info().
 */
function jwt_link_token_info() {
  return array(
    'types' => array(
      'jwt' => array(
        'name' => t('JWT'),
        'description' => t('Tokens used for JWT.'),
      ),
    ),
    'tokens' => array(
      'jwt' => array(
        'jwt-link' => array(
          'name' => t('JWT link'),
          'description' => t('Placeholder for JWT encoded url.'),
        ),
        'jwt-token' => array(
          'name' => t('JWT token'),
          'description' => t('Placeholder for JWT encoded token only.'),
        ),
      ),
    ),
  );
}

/**
 * Implements hook_tokens().
 */
function jwt_link_tokens($type, $tokens, array $data = array(), array $options = array()) {
  $replacements = array();
  if ($type === 'jwt') {
    foreach ($tokens as $name => $original) {
      switch ($name) {
        case 'jwt-link':
          if (user_is_logged_in()) {
            $link_text = variable_get('jwt_link_text', t('Visit Site...'));
            $jwt_url = jwt_link_url();
            $jwt_encoded_url = l($link_text, $jwt_url['jwt_encoded_url'], array('attributes' => array('target' => '_blank')));
          }
          $replacements[$original] = $jwt_encoded_url;
          break;

        case 'jwt-token':
          if (user_is_logged_in()) {
            $jwt_token = jwt_link_url();
            $jwt_encoded_token = $jwt_token['jwt_encoded_token'];
          }
          $replacements[$original] = $jwt_encoded_token;
          break;

        default:
      }
    }
  }
  return $replacements;
}

/**
 * Implements hook_admin().
 */
function jwt_link_admin() {
  $form = array();

  $form['jwt_link_token_values'] = array(
    '#title' => t('Token value'),
    '#type' => 'textarea',
    '#default_value' => variable_get('jwt_link_token_values', ''),
    '#description' => 'The possible values this field can contain. Enter one value per line, in the format key|value. This field supports tokens.',
  );

  if (module_exists('token')) {
    $form['jwt_link_browse_token'] = array(
      '#theme' => 'token_tree',
      '#token_types' => 'all',
      '#dialog' => TRUE,
    );
  }

  $form['jwt_link_text'] = array(
    '#type' => 'textfield',
    '#title' => 'Link Text',
    '#default_value' => variable_get('jwt_link_text', 'Visit Site...'),
    '#size' => 100,
    '#description' => 'A nice message for the link rather that outputting the long URL.',
  );

  $form['jwt_link_url'] = array(
    '#type' => 'textfield',
    '#title' => 'URL / Link To',
    '#default_value' => variable_get('jwt_link_url', ''),
    '#size' => 100,
    '#description' => 'Site URL to link to. It will likely be the same domain of the Audience / Authorization server e.g. http://siteauthorizingthis.com/some/path',
  );

  $form['jwt_link_arg'] = array(
    '#type' => 'textfield',
    '#title' => 'URL Token Argument',
    '#default_value' => variable_get('jwt_link_arg', 'token'),
    '#size' => 100,
    '#description' => 'Token variable name for URL. Typically "jwt" or "token".',
  );

  $form['jwt_link_key'] = array(
    '#type' => 'textfield',
    '#title' => 'Key',
    '#default_value' => variable_get('jwt_link_key', ''),
    '#size' => 100,
    '#description' => 'Some key or random string for encrypting the data.',
  );

  $form['jwt_link_alg'] = array(
    '#title' => t('Encryption Algorithm'),
    '#type' => 'select',
    '#options' => array(
      'HS256' => 'HS256',
      'HS512' => 'HS512',
      'HS384' => 'HS384',
    ),
    '#default_value' => variable_get('jwt_link_alg', 'HS256'),
    '#description' => 'Which algorithm for encryption. Default HS256.',
  );

  $form['jwt_link_expiration'] = array(
    '#type' => 'textfield',
    '#title' => 'Token expiration',
    '#default_value' => variable_get('jwt_link_expiration', 3),
    '#size' => 1,
    '#maxlength' => 2,
    '#field_suffix' => 'minutes',
    '#description' => 'The amount of time until the token expires.',
  );

  return system_settings_form($form);
}

/**
 * Method to generate jwt url.
 */
function jwt_link_url() {
  $link_url = variable_get('jwt_link_url', '');
  $link_arg = variable_get('jwt_link_arg', 'token');
  $key = variable_get('jwt_link_key', '');
  $alg = variable_get('jwt_link_alg', 'HS256');

  // Token expiration.
  $exp = time() + (60 * variable_get('jwt_link_expiration'));

  // Default tokens.
  $token = array(
    "exp" => $exp,
  );
  global $user;

  $token_values = variable_get('jwt_link_token_values');
  if (!empty($token_values)) {
    $configured_token = array();
    $token_values = explode("\n", $token_values);
    foreach ($token_values as $item) {
      list($token_key, $value) = explode('|', $item);
      $token_item = token_replace($value, array('user' => $user));
      $configured_token[trim($token_key)] = trim($token_item);
    }
    $token = array_merge($configured_token, $token);
  }

  // Generate encoded token.
  $jwt_encoded_token = JWT::encode($token, $key, $alg);
  $jwt_encoded_url = "{$link_url}?{$link_arg}={$jwt_encoded_token}";

  $jwt = array(
    'jwt_encoded_token' => $jwt_encoded_token,
    'jwt_encoded_url' => $jwt_encoded_url,
  );
  return $jwt;
}

/**
 * Implements hook_block_info().
 */
function jwt_link_block_info() {
  $blocks['jwt_link'] = array(
    'info' => t('JWT URL Link'),
    'cache' => DRUPAL_CACHE_PER_ROLE,
  );

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function jwt_link_block_view($delta = '') {
  switch ($delta) {
    case 'jwt_link':
      if (user_access('access content')) {
        if (user_is_logged_in()) {
          $link_text = variable_get('jwt_link_text', t('Visit Site...'));
          $jwt_url = jwt_link_url();
          $block_content = l($link_text, $jwt_url['jwt_encoded_url'], array('attributes' => array('target' => '_blank')));
        }
        else {
          $block_content = t("Access denied");
        }
      }
      $block['content'] = $block_content;
      break;
  }
  return $block;
}

